% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Docs.R
\docType{package}
\name{NPEL.Classification}
\alias{NPEL.Classification}
\alias{NPEL.Classification-package}
\title{For aiding in processings and classification of remote sensed data, and rendering of imputed maps}
\description{
For aiding in processings and classification of remote sensed data, and rendering of imputed maps
}
\section{Functions}{

This package aims to aid and simplify the following tasks:
\itemize{
  \item reading and writing multilayer raster TIFs (relying heavily on the raster package)
  \item sampling locational data from these rasters, i.e. extracting raster data for field sites
  \item grouping/lumping classes for reduced or simplified analysis, e.g. to increase sample size in each class
  \item streamlining building classification models from several packages
  \item to aid in the analysis of bundles of models, particularly accuracy metrics but also a limited VIMP metric
  \item streamlining the rendering of output rasters derived from these classifiers and the input rasters
  \item to provide plotting of these data
  \item to allow extensibility of the above functionality
  \item to provide education and examples for this type of analysis
}

These tasks fall into six main groups with the following functions associated with each task:
\enumerate{
\item Read in a raster
  \itemize{
    \item \code{\link{readTile}} -- read a collection of TIF files from a folder and compile them into a single raster.stack.
  }
\item Extract data from the raster
  \itemize{
    \item \code{\link{extractPoints}} -- given a collection of spatial points (package:maptools), extract the raster
      data under them. This is allows the construction of a model linking site characteristics--most notably
      ecoSite--to remote sense variables.
  }
\item Generate Models
  \itemize{
    \item \code{\link{generateModels}} -- given some data and a list of model types, create a list of models. This returns a
      list of models, which together can be treated as a whole using many of the analytical functions.
  }
\item Assess model accuracy and variable importance
  \itemize{
    \item \code{\link{classAcc}} -- compute the class level accuracies for a specified model.
    \item \code{\link{modelAccs}} -- compute the accuracies and VIMP data for a list of models.
    \item \code{\link{npelVIMP}} -- generate variable importance data for a model. This was developed as a way of
      finding VIMP for nearest neighbour models but has been expanded to generate VIMP data for all models included in
      this package using the same leave-one-out technique.
    \item \code{\link{npelVIF}} -- compute the variable inflation factor for a model.
  }
\item Render Output
  \itemize{
    \item \code{\link{writeTile}} -- generate a output raster(s) given a collection of input rasters and a single model.
    \item \code{\link{writeTiles}} -- generate a collection output raster given a input rasters and a list of models.
  }
\item Visualize the results
  \itemize{
    \item \code{\link{plotTile}} -- plot a single model; doesn't work yet???
    \item \code{\link{plotTiles}} -- plot a list of models; doesn't work yet???
  }
}
}

\section{Sample Data}{

A small selection of data has been included in the package for didactic and testing purposes:
\itemize{
  \item \code{\link{egTile}} -- a sample tile comprising an .rda file linked to a (small) collection of tifs
  \item \code{\link{siteData}} -- a (small) subset of site data
  \item \code{\link{ecoGroup}} -- an example transformation 'function' including labels and suggested colours
}
}

\section{Utilitie functions}{

There are several other common tasks that this package aims to streamline:
\itemize{
\item A few factor variable utilities
  \itemize{
    \item \code{\link{sortLevels}} -- sort the levels of a factor so they are in order
    \item \code{\link{trimLevels}} -- trim the levels of a factor so only levels that appear in the variable are present
    \item \code{\link{mergeLevels}} -- merge the levels of two factor variables
    \item \code{\link{factorValues}} -- as outlined in the warnings section of the help file for factors
      (\code{?factor}) there is a common gotcha when dealing with factors: converting numerical factors using
      \code{as.numeric} returns the factor \emph{indices} not the values as expected. \code{factor}
    \item \code{\link{rad2deg}} -- convert radians to degrees; for slope, aspect, hillshade etc.
    \item \code{\link{deg2rad}} -- convert degrees to radians; for slope, aspect, hillshade etc.
  }
\item Object Oriented access to model internals
  The various modelling packages that are used by \pkg{NPEL.Classification} all have different ways of storing their
  internals, nor do they all store the \emph{same} data. In a few cases, the existing package did not even wrap their
  models in classes; this has been done in this package so access to the models can be standardized through S3
  overloading. These OOP methods clean up the situation by providing a common interface for all the data, and in some
  cases generating the data when necessary.
  \itemize{
    \item \code{\link{getData}} -- the data used to build this model.
    \item \code{\link{getClasses}} -- the list of classes present in this model.
    \item \code{\link{getFormula}} -- the formula used to generate this model.
    \item \code{\link{getArgs}} -- the arguments specific to this model type used when building this model.
    \item \code{\link{getFitted}} -- the fitted data from the original dataset.
    \item \code{\link{getVIMP}} -- variable importance data; generated for some model types.
    \item \code{\link{buildModel}} -- a single function for building a model; see the documentation for more
      information on how the desired model type is passed to the function.
    \item \code{\link{buildPredict}} -- build a function that can be used to predict new values for this model; standardizes the
      interface across all model types.
  }
}
}
\seealso{
vignette("???",package="NPEL.Classification")
}

