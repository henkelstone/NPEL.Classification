% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/OOP_util.R
\name{getFitted}
\alias{getFitted}
\title{Extract the fitted data from a model object}
\usage{
getFitted(model)
}
\arguments{
\item{model}{is the model for which to extract the fitted data}
}
\value{
a factor variable containing the fitted data
}
\description{
This function returns the fitted data that the model was built on; that is, if we 'predict' this model using the same data we used to
generate the model, we would get this as a result.
}
\details{
There is a subtle but significant point about getFitted: it cannot be assumed that \code{predict} called with the same data used to
generate the model will give the same results as getFitted. In general, when the original data is dropped down through a classifier, it
will return the original results. It makes sense: if this is a known data point, then why not return the known class. However, in order to
estimate accuracy, most packages will use some type of technique to give a dataset that shows what the model \emph{would} have return if
the datapoint had \emph{not} been included in the original data. In all cases, getFitted returns this dataset: the one that can be used
for error estimation. \code{\link{buildPredict}} was designed for classifying new data; what it returns when original data is used is
dependent on both the type of classifier and the implementation of the package.
\itemize{
  \item Random Forest: both packages will estimate the accuracy based on data that falls out-of-bag (OOB); that is, when a data point is
  not directly represented in a tree, that data point can be used to estimate the accuracy of that tree. The technique is akin to a
  leave-one-out validation method.
  \item Nearest Neighbour: the issue here is identical. getFitted is estimated using a leave-out-out cross-validation approach for all
  packages. The predict function will return the original data. In the case of the FNN package, the nearest-neighbour index is included in
  the model results; the \emph{second} nearest neighbour returned by predict matches the values returned by getFitted.
  \item GBM: in this case, the values of getFitted match those returned by predict.
}
}
\note{
The nearest neighbour models in package:FNN and package:class do not enclose their results in a class; when NPEL.Classification
  builds objects of these types it wraps them in a class so they are recognizable by S3 methods, and attaches the formula and data.
  Hence, if a model was built directly using these packages the result will not run this function.
}
\section{Warning}{

  I am concerned that there is a bug in FNN::knn and possibly class::knn ??? describe or remove this note
}

